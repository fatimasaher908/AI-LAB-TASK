# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T7RWnJDRDum5WDzVULlQxSN7sXXwmL3Z
"""

from collections import deque
pakistan_cities = {
    'Karachi': ['Hyderabad'],
    'Hyderabad': ['Karachi', 'Sukkur'],
    'Sukkur': ['Hyderabad', 'Multan', 'Quetta'],
    'Multan': ['Sukkur', 'Lahore'],
    'Quetta': ['Sukkur'],
    'Lahore': ['Multan', 'Islamabad'],
    'Islamabad': ['Lahore', 'Peshawar'],
    'Peshawar': ['Islamabad']
}

#bfs

def bfs_shortest_path(graph, start, goal):
  queue = deque([[start]])
  visited = set()

  while queue:
    path = queue.popleft()
    current_city = path[-1]

    if current_city == goal:
      return path

    if current_city not in visited:
      visited.add(current_city)

      for neighbour in graph.get(current_city,[]):
        new_path = list(path)
        new_path.append(neighbour)
        queue.append(new_path)

  return None

start_city = "Karachi"
goal_city = "Peshawar"
bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Karachi to Peshawar:", bfs_result)

def dfs_path(graph, start, goal, path=None, visited=None):
  if path is None:
    path = []
  if visited is None:
    visited = set()

  path.append(start)
  visited.add(start)

  if start == goal:
    return path

  for neighbour in graph.get(start, []):
    if neighbour not in visited:
      result = dfs_path(graph, neighbour, goal, path.copy(), visited.copy())

      if result:
        return result

  return None

start_city = "Karachi"
goal_city = "Peshawar"
dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Karachi to Peshawar:", dfs_result)
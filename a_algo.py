# -*- coding: utf-8 -*-
"""A*Algo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zXIilP3sei5Xr_Ad3AItBBWjsmIl8h_r
"""

import heapq

city_map = {
    "Lahore": {"Islamabad": 270, "Faisalabad": 180},
    "Islamabad": {"Lahore": 270, "Peshawar": 190},
    "Faisalabad": {"Lahore": 180, "Multan": 220},
    "Multan": {"Faisalabad": 220, "Karachi": 880},
    "Peshawar": {"Islamabad": 190},
    "Karachi": {"Multan": 880}
}

estimated_distances = {
    "Lahore": 1210,
    "Islamabad": 1100,
    "Faisalabad": 1050,
    "Multan": 880,
    "Peshawar": 1250,
    "Karachi": 0
}

def a_star_search(map_data, start, destination, estimates):
    queue = []
    heapq.heappush(queue, (estimates[start], [start]))
    travel_cost = {start: 0}
    visited = set()

    while queue:
        current_f, route = heapq.heappop(queue)
        current_city = route[-1]

        if current_city == destination:
            return route, travel_cost[current_city]

        if current_city in visited:
            continue

        visited.add(current_city)

        for neighbor, distance in map_data[current_city].items():
            new_cost = travel_cost[current_city] + distance

            if neighbor not in travel_cost or new_cost < travel_cost[neighbor]:
                travel_cost[neighbor] = new_cost
                total_estimated_cost = new_cost + estimates.get(neighbor, float('inf'))
                new_route = route + [neighbor]
                heapq.heappush(queue, (total_estimated_cost, new_route))

    return None, float('inf')

if __name__ == "__main__":
    start_city = "Lahore"
    target_city = "Karachi"
    result_path, total_distance = a_star_search(city_map, start_city, target_city, estimated_distances)
    print("A* path:", result_path)
    print("Total cost:", total_distance)